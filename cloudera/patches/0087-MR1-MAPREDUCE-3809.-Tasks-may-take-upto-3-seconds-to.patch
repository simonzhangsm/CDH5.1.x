From ec773b984a946bcfaf56a0a10cfb9707732bc6c5 Mon Sep 17 00:00:00 2001
From: Tom White <tom@cloudera.com>
Date: Thu, 3 May 2012 11:30:02 -0700
Subject: [PATCH 087/795] MR1: MAPREDUCE-3809. Tasks may take upto 3 seconds to exit after completion.

Reason: Performance
Author: Siddharth Seth
Ref: CDH-5628
(cherry picked from commit 9e08a03acbe12c5a00aee9417d8e87c2ec4451ab)
(cherry picked from commit 8f5b0d44d94d33464fcd9d83ecc6dfb559bf5faf)
---
 src/mapred/org/apache/hadoop/mapred/Task.java |   22 ++++++++++++++--------
 1 files changed, 14 insertions(+), 8 deletions(-)

diff --git a/src/mapred/org/apache/hadoop/mapred/Task.java b/src/mapred/org/apache/hadoop/mapred/Task.java
index b17df5c..e2a8e45 100644
--- a/src/mapred/org/apache/hadoop/mapred/Task.java
+++ b/src/mapred/org/apache/hadoop/mapred/Task.java
@@ -641,14 +641,13 @@ public void run() {
         try {
           boolean taskFound = true; // whether TT knows about this task
           // sleep for a bit
-          try {
-            Thread.sleep(PROGRESS_INTERVAL);
-          } 
-          catch (InterruptedException e) {
-            if (LOG.isDebugEnabled()) {
-              LOG.debug(getTaskID() + " Progress/ping thread exiting " +
-                "since it got interrupted");
+          synchronized(lock) {
+            if (taskDone.get()) {
+              break;
             }
+            lock.wait(PROGRESS_INTERVAL);
+          }
+          if (taskDone.get()) {
             break;
           }
 
@@ -707,7 +706,14 @@ public void startCommunicationThread() {
     public void stopCommunicationThread() throws InterruptedException {
       // Updating resources specified in ResourceCalculatorPlugin
       if (pingThread != null) {
-        synchronized (lock) {
+        // Intent of the lock is to not send an interupt in the middle of an
+        // umbilical.ping or umbilical.statusUpdate
+        synchronized(lock) {
+        //Interrupt if sleeping. Otherwise wait for the RPC call to return.
+          lock.notify(); 
+        }
+
+        synchronized (lock) { 
           while (!done) {
             lock.wait();
           }
-- 
1.7.0.4

