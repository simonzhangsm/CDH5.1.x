From 82b3a67d151e4917ede5ef191276b7f4942744c8 Mon Sep 17 00:00:00 2001
From: Andrew Wang <wang@apache.org>
Date: Fri, 11 Apr 2014 00:21:39 +0000
Subject: [PATCH 568/795] Undo accidental FSNamesystem change introduced in HDFS-6224 commit.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1586515 13f79535-47bb-0310-9956-ffa450edef68
(cherry picked from commit bd4b0d5e431ddd40511ead844566c702424d82f7)
---
 .../hadoop/hdfs/server/namenode/FSNamesystem.java  |   24 ++++++-------------
 1 files changed, 8 insertions(+), 16 deletions(-)

diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java
index e75904c..2c314a0 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java
@@ -7355,7 +7355,6 @@ long addCacheDirective(CacheDirectiveInfo directive, EnumSet<CacheFlag> flags)
       cacheManager.waitForRescanIfNeeded();
     }
     writeLock();
-    String effectiveDirectiveStr = null;
     Long result = null;
     try {
       checkOperation(OperationCategory.WRITE);
@@ -7367,12 +7366,11 @@ long addCacheDirective(CacheDirectiveInfo directive, EnumSet<CacheFlag> flags)
         throw new IOException("addDirective: you cannot specify an ID " +
             "for this operation.");
       }
-      CacheDirectiveInfo effectiveDirective =
+      CacheDirectiveInfo effectiveDirective = 
           cacheManager.addDirective(directive, pc, flags);
       getEditLog().logAddCacheDirectiveInfo(effectiveDirective,
           cacheEntry != null);
       result = effectiveDirective.getId();
-      effectiveDirectiveStr = effectiveDirective.toString();
       success = true;
     } finally {
       writeUnlock();
@@ -7380,7 +7378,7 @@ long addCacheDirective(CacheDirectiveInfo directive, EnumSet<CacheFlag> flags)
         getEditLog().logSync();
       }
       if (isAuditEnabled() && isExternalInvocation()) {
-        logAuditEvent(success, "addCacheDirective", effectiveDirectiveStr, null, null);
+        logAuditEvent(success, "addCacheDirective", null, null, null);
       }
       RetryCache.setState(cacheEntry, success, result);
     }
@@ -7417,8 +7415,7 @@ void modifyCacheDirective(CacheDirectiveInfo directive,
         getEditLog().logSync();
       }
       if (isAuditEnabled() && isExternalInvocation()) {
-        String idStr = "{id: " + directive.getId().toString() + "}";
-        logAuditEvent(success, "modifyCacheDirective", idStr, directive.toString(), null);
+        logAuditEvent(success, "modifyCacheDirective", null, null, null);
       }
       RetryCache.setState(cacheEntry, success);
     }
@@ -7446,8 +7443,7 @@ void removeCacheDirective(Long id) throws IOException {
     } finally {
       writeUnlock();
       if (isAuditEnabled() && isExternalInvocation()) {
-        String idStr = "{id: " + id.toString() + "}";
-        logAuditEvent(success, "removeCacheDirective", idStr, null,
+        logAuditEvent(success, "removeCacheDirective", null, null,
             null);
       }
       RetryCache.setState(cacheEntry, success);
@@ -7472,7 +7468,7 @@ void removeCacheDirective(Long id) throws IOException {
     } finally {
       readUnlock();
       if (isAuditEnabled() && isExternalInvocation()) {
-        logAuditEvent(success, "listCacheDirectives", filter.toString(), null,
+        logAuditEvent(success, "listCacheDirectives", null, null,
             null);
       }
     }
@@ -7489,7 +7485,6 @@ public void addCachePool(CachePoolInfo req) throws IOException {
     }
     writeLock();
     boolean success = false;
-    String poolInfoStr = null;
     try {
       checkOperation(OperationCategory.WRITE);
       if (isInSafeMode()) {
@@ -7500,13 +7495,12 @@ public void addCachePool(CachePoolInfo req) throws IOException {
         pc.checkSuperuserPrivilege();
       }
       CachePoolInfo info = cacheManager.addCachePool(req);
-      poolInfoStr = info.toString();
       getEditLog().logAddCachePool(info, cacheEntry != null);
       success = true;
     } finally {
       writeUnlock();
       if (isAuditEnabled() && isExternalInvocation()) {
-        logAuditEvent(success, "addCachePool", poolInfoStr, null, null);
+        logAuditEvent(success, "addCachePool", req.getPoolName(), null, null);
       }
       RetryCache.setState(cacheEntry, success);
     }
@@ -7539,8 +7533,7 @@ public void modifyCachePool(CachePoolInfo req) throws IOException {
     } finally {
       writeUnlock();
       if (isAuditEnabled() && isExternalInvocation()) {
-        String poolNameStr = "{poolName: " + req.getPoolName() + "}";
-        logAuditEvent(success, "modifyCachePool", poolNameStr, req.toString(), null);
+        logAuditEvent(success, "modifyCachePool", req.getPoolName(), null, null);
       }
       RetryCache.setState(cacheEntry, success);
     }
@@ -7573,8 +7566,7 @@ public void removeCachePool(String cachePoolName) throws IOException {
     } finally {
       writeUnlock();
       if (isAuditEnabled() && isExternalInvocation()) {
-        String poolNameStr = "{poolName: " + cachePoolName + "}";
-        logAuditEvent(success, "removeCachePool", poolNameStr, null, null);
+        logAuditEvent(success, "removeCachePool", cachePoolName, null, null);
       }
       RetryCache.setState(cacheEntry, success);
     }
-- 
1.7.0.4

