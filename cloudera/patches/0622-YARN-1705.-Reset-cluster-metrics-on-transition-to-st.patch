From b53f4396613d83b9bdc979c38a7152c3cc6c43a8 Mon Sep 17 00:00:00 2001
From: Karthik Kambatla <kasha@apache.org>
Date: Tue, 18 Mar 2014 19:03:24 +0000
Subject: [PATCH 622/795] YARN-1705. Reset cluster-metrics on transition to standby. (Rohith via kasha)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/branch-2@1579015 13f79535-47bb-0310-9956-ffa450edef68
(cherry picked from commit 59905f0b48fc29b3882e035ef7da98b2bf250e30)

Conflicts:
	hadoop-yarn-project/CHANGES.txt
---
 .../server/resourcemanager/ResourceManager.java    |    3 +
 .../resourcemanager/scheduler/QueueMetrics.java    |    2 +-
 .../yarn/server/resourcemanager/TestRMHA.java      |   40 +++++++++++++++++---
 3 files changed, 38 insertions(+), 7 deletions(-)

diff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java
index 50dc537..03ea22a 100644
--- a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java
+++ b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java
@@ -79,6 +79,7 @@
 import org.apache.hadoop.yarn.server.resourcemanager.scheduler.ContainerPreemptEvent;
 import org.apache.hadoop.yarn.server.resourcemanager.scheduler.ContainerPreemptEventType;
 import org.apache.hadoop.yarn.server.resourcemanager.scheduler.PreemptableResourceScheduler;
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.QueueMetrics;
 import org.apache.hadoop.yarn.server.resourcemanager.scheduler.ResourceScheduler;
 import org.apache.hadoop.yarn.server.resourcemanager.scheduler.event.SchedulerEvent;
 import org.apache.hadoop.yarn.server.resourcemanager.scheduler.event.SchedulerEventType;
@@ -829,6 +830,8 @@ void stopActiveServices() throws Exception {
       rmContext.getRMNodes().clear();
       rmContext.getInactiveRMNodes().clear();
       rmContext.getRMApps().clear();
+      ClusterMetrics.destroy();
+      QueueMetrics.clearQueueMetrics();
     }
   }
 
diff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/QueueMetrics.java b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/QueueMetrics.java
index 07ff9ae..d98c893 100644
--- a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/QueueMetrics.java
+++ b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/QueueMetrics.java
@@ -127,7 +127,7 @@ static QueueMetrics forQueue(String queueName, Queue parent,
   }
 
   /**
-   * Helper method to clear cache - used only for unit tests.
+   * Helper method to clear cache.
    */
   @Private
   public synchronized static void clearQueueMetrics() {
diff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/TestRMHA.java b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/TestRMHA.java
index a7c8284..c89115c 100644
--- a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/TestRMHA.java
+++ b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/TestRMHA.java
@@ -32,6 +32,7 @@
 import org.apache.hadoop.yarn.event.Dispatcher;
 import org.apache.hadoop.yarn.event.EventHandler;
 import org.apache.hadoop.yarn.exceptions.YarnRuntimeException;
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.QueueMetrics;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -138,32 +139,38 @@ public void testStartAndTransitions() throws IOException {
     rm.start();
     checkMonitorHealth();
     checkStandbyRMFunctionality();
-
+    verifyClusterMetrics(0, 0, 0, 0, 0, 0);
+    
     // 1. Transition to Standby - must be a no-op
     rm.adminService.transitionToStandby(requestInfo);
     checkMonitorHealth();
     checkStandbyRMFunctionality();
-
+    verifyClusterMetrics(0, 0, 0, 0, 0, 0);
+    
     // 2. Transition to active
     rm.adminService.transitionToActive(requestInfo);
     checkMonitorHealth();
     checkActiveRMFunctionality();
-
+    verifyClusterMetrics(1, 1, 1, 1, 2048, 1);
+    
     // 3. Transition to active - no-op
     rm.adminService.transitionToActive(requestInfo);
     checkMonitorHealth();
     checkActiveRMFunctionality();
-
+    verifyClusterMetrics(1, 2, 2, 2, 2048, 2);
+    
     // 4. Transition to standby
     rm.adminService.transitionToStandby(requestInfo);
     checkMonitorHealth();
     checkStandbyRMFunctionality();
-
+    verifyClusterMetrics(0, 0, 0, 0, 0, 0);
+   
     // 5. Transition to active to check Active->Standby->Active works
     rm.adminService.transitionToActive(requestInfo);
     checkMonitorHealth();
     checkActiveRMFunctionality();
-
+    verifyClusterMetrics(1, 1, 1, 1, 2048, 1);
+    
     // 6. Stop the RM. All services should stop and RM should not be ready to
     // become active
     rm.stop();
@@ -367,6 +374,27 @@ public void testHAWithRMHostName() {
       fail("Should not throw any exceptions.");
     }
   }
+  
+  private void verifyClusterMetrics(int activeNodes, int appsSubmitted,
+      int appsPending, int containersPending, int availableMB,
+      int activeApplications) {
+    QueueMetrics metrics = rm.getResourceScheduler().getRootQueueMetrics();
+    // verify queue metrics
+    assertMetric("appsSubmitted", appsSubmitted, metrics.getAppsSubmitted());
+    assertMetric("appsPending", appsPending, metrics.getAppsPending());
+    assertMetric("containersPending", containersPending,
+        metrics.getPendingContainers());
+    assertMetric("availableMB", availableMB, metrics.getAvailableMB());
+    assertMetric("activeApplications", activeApplications,
+        metrics.getActiveApps());
+    // verify node metric
+    ClusterMetrics clusterMetrics = ClusterMetrics.getMetrics();
+    assertMetric("activeNodes", activeNodes, clusterMetrics.getNumActiveNMs());
+  }
+
+  private void assertMetric(String metricName, int expected, int actual) {
+    assertEquals("Incorrect value for metric " + metricName, expected, actual);
+  }
 
   @SuppressWarnings("rawtypes")
   class MyCountingDispatcher extends AbstractService implements Dispatcher {
-- 
1.7.0.4

