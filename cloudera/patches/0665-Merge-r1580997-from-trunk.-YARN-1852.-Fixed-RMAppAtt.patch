From ec1787afe75b52f830aa09c2771ba3ae39f3b413 Mon Sep 17 00:00:00 2001
From: Jian He <jianhe@apache.org>
Date: Mon, 24 Mar 2014 19:06:50 +0000
Subject: [PATCH 665/795] Merge r1580997 from trunk. YARN-1852. Fixed RMAppAttempt to not resend AttemptFailed/AttemptKilled events to already recovered Failed/Killed RMApps. Contributed by Rohith Sharmaks

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/branch-2@1581001 13f79535-47bb-0310-9956-ffa450edef68
(cherry picked from commit c38de2246f372369c1f8a50d604127cc4c9e1aa0)

Conflicts:
	hadoop-yarn-project/CHANGES.txt
---
 .../server/resourcemanager/rmapp/RMAppImpl.java    |    6 ++-
 .../rmapp/TestRMAppTransitions.java                |   54 +++++++++++++++++++-
 2 files changed, 58 insertions(+), 2 deletions(-)

diff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java
index d3265d8..7559602 100644
--- a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java
+++ b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java
@@ -1183,8 +1183,12 @@ public YarnApplicationState createApplicationState() {
   }
   
   public static boolean isAppInFinalState(RMApp rmApp) {
-    RMAppState appState = rmApp.getState();
+    RMAppState appState = ((RMAppImpl) rmApp).getRecoveredFinalState();
     return appState == RMAppState.FAILED || appState == RMAppState.FINISHED
         || appState == RMAppState.KILLED;
   }
+  
+  private RMAppState getRecoveredFinalState() {
+    return this.recoveredFinalState;
+  }
 }
diff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/TestRMAppTransitions.java b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/TestRMAppTransitions.java
index 8eab844..6e9ba25 100644
--- a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/TestRMAppTransitions.java
+++ b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/TestRMAppTransitions.java
@@ -26,6 +26,7 @@
 import java.io.IOException;
 import java.util.Arrays;
 import java.util.Collection;
+import java.util.Map;
 
 import org.junit.Assert;
 
@@ -53,6 +54,7 @@
 import org.apache.hadoop.yarn.server.resourcemanager.RMContextImpl;
 import org.apache.hadoop.yarn.server.resourcemanager.recovery.RMStateStore;
 import org.apache.hadoop.yarn.server.resourcemanager.recovery.RMStateStore.ApplicationState;
+import org.apache.hadoop.yarn.server.resourcemanager.recovery.RMStateStore.RMState;
 import org.apache.hadoop.yarn.server.resourcemanager.rmapp.attempt.AMLivelinessMonitor;
 import org.apache.hadoop.yarn.server.resourcemanager.rmapp.attempt.RMAppAttempt;
 import org.apache.hadoop.yarn.server.resourcemanager.rmapp.attempt.RMAppAttemptEvent;
@@ -862,7 +864,57 @@ public void testAppKilledKilled() throws IOException {
     assertAppState(RMAppState.KILLED, application);
 
   }
-
+  
+  @Test(timeout = 30000)
+  public void testAppsRecoveringStates() throws Exception {
+    RMState state = new RMState();
+    Map<ApplicationId, ApplicationState> applicationState =
+        state.getApplicationState();
+    createRMStateForApplications(applicationState, RMAppState.FINISHED);
+    createRMStateForApplications(applicationState, RMAppState.KILLED);
+    createRMStateForApplications(applicationState, RMAppState.FAILED);
+    for (ApplicationState appState : applicationState.values()) {
+      testRecoverApplication(appState, state);
+    }
+  }
+  
+  public void testRecoverApplication(ApplicationState appState, RMState rmState)
+      throws Exception {
+    ApplicationSubmissionContext submissionContext =
+        appState.getApplicationSubmissionContext();
+    RMAppImpl application =
+        new RMAppImpl(appState.getAppId(), rmContext, conf,
+            submissionContext.getApplicationName(), null,
+            submissionContext.getQueue(), submissionContext, null, null,
+            appState.getSubmitTime(), submissionContext.getApplicationType(),
+            submissionContext.getApplicationTags());
+    Assert.assertEquals(RMAppState.NEW, application.getState());
+    application.recover(rmState);
+
+    // Application final status looked from recoveredFinalStatus
+    Assert.assertTrue("Application is not in recoveredFinalStatus.",
+        RMAppImpl.isAppInFinalState(application));
+
+    // Trigger RECOVER event.
+    application.handle(new RMAppEvent(appState.getAppId(),
+        RMAppEventType.RECOVER));
+    rmDispatcher.await();
+    RMAppState finalState = appState.getState();
+    Assert.assertEquals("Application is not in finalState.", finalState,
+        application.getState());
+  }
+  
+  public void createRMStateForApplications(
+      Map<ApplicationId, ApplicationState> applicationState,
+      RMAppState rmAppState) {
+    RMApp app = createNewTestApp(null);
+    ApplicationState appState =
+        new ApplicationState(app.getSubmitTime(), app.getStartTime(),
+            app.getApplicationSubmissionContext(), app.getUser(), rmAppState,
+            null, app.getFinishTime());
+    applicationState.put(app.getApplicationId(), appState);
+  }
+  
   @Test
   public void testGetAppReport() {
     RMApp app = createNewTestApp(null);
-- 
1.7.0.4

